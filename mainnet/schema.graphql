type ReserveHistory @entity {
  id: ID!
  block: BigInt
  blockTimestamp: BigInt
  openPriceCDAI: BigDecimal
  openPriceDAI: BigDecimal
  closePriceCDAI: BigDecimal
  closePriceDAI: BigDecimal
  marketCap: BigDecimal
  reserveRatio: BigDecimal
  reserveValueInDAI: BigDecimal
  totalSupply: BigInt
  ubiMintedFromExpansion: BigDecimal!
  ubiMintedFromInterest: BigDecimal!
  interestReceivedCDAI: BigDecimal!
  interestReceivedDAI: BigDecimal!
}

type StakeHistory @entity {
  id: ID!
  totalUSDStaked: BigDecimal!
  stakingContracts: [ContractStakeHistory!]!
}

type ContractStakeHistory @entity {
  id: ID!
  day: BigInt!
  contract: StakeStatistic!
  totalUSDStaked: BigDecimal!
  totalTokenStaked: BigDecimal!
  supporters:[Supporter!]!
  opValues: [BigDecimal!]!
}

type Supporter @entity {
  id: ID!
  totalUSDStaked: BigDecimal!
  stakingContracts:  [ContractStakeHistory!]! @derivedFrom(field: "supporters")
}

type StakeStatistic @entity {
  id: ID!
  totalUSDStaked: BigDecimal!
  totalTokenStaked: BigDecimal!
  contractStakeHistory:  [ContractStakeHistory!] @derivedFrom(field: "contract")
}

type GoodBalance @entity {
 id: ID!
 "GOOD tokens minted on current blockchain"
 coreBalance: BigInt!
 "Delegated + Own undelegated GOOD on current blockchain"
 activeVotes: BigInt!
 "total activeVotes on other blockchains from state proof"
 blockchainsBalance: BigInt!
 "total voting power = activeVotes + blockchainsBalance"
 totalVotes: BigInt!
 stateProofs: [StateProof!]! @derivedFrom(field: "account")
 delegatees: [GoodBalance!]! @derivedFrom(field: "delegator")
 delegator: GoodBalance
}

type StateProof @entity {
  id: ID!
  blockchain: String!
  account: GoodBalance!
  balance: BigInt!
  timestamp: BigInt!
}

type StateHash @entity {
  id: ID!
  timestamp: BigInt!
  blockchain: String!
  merkleRoot: Bytes!
  totalSupply: BigInt!
}
