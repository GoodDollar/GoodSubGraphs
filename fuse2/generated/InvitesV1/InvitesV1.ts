// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InviteeJoined extends ethereum.Event {
  get params(): InviteeJoined__Params {
    return new InviteeJoined__Params(this);
  }
}

export class InviteeJoined__Params {
  _event: InviteeJoined;

  constructor(event: InviteeJoined) {
    this._event = event;
  }

  get inviter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get invitee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InviterBounty extends ethereum.Event {
  get params(): InviterBounty__Params {
    return new InviterBounty__Params(this);
  }
}

export class InviterBounty__Params {
  _event: InviterBounty;

  constructor(event: InviterBounty) {
    this._event = event;
  }

  get inviter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get invitee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bountyPaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get inviterLevel(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get earnedLevel(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class InvitesV1__levelsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getToNext(): BigInt {
    return this.value0;
  }

  getBounty(): BigInt {
    return this.value1;
  }

  getDaysToComplete(): BigInt {
    return this.value2;
  }
}

export class InvitesV1__statsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalApprovedInvites(): BigInt {
    return this.value0;
  }

  getTotalBountiesPaid(): BigInt {
    return this.value1;
  }

  getTotalInvited(): BigInt {
    return this.value2;
  }
}

export class InvitesV1__usersResult {
  value0: Address;
  value1: Bytes;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: boolean,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getInvitedBy(): Address {
    return this.value0;
  }

  getInviteCode(): Bytes {
    return this.value1;
  }

  getBountyPaid(): boolean {
    return this.value2;
  }

  getLevel(): BigInt {
    return this.value3;
  }

  getLevelStarted(): BigInt {
    return this.value4;
  }

  getTotalApprovedInvites(): BigInt {
    return this.value5;
  }

  getTotalEarned(): BigInt {
    return this.value6;
  }

  getJoinedAt(): BigInt {
    return this.value7;
  }
}

export class InvitesV1 extends ethereum.SmartContract {
  static bind(address: Address): InvitesV1 {
    return new InvitesV1("InvitesV1", address);
  }

  active(): boolean {
    let result = super.call("active", "active():(bool)", []);

    return result[0].toBoolean();
  }

  try_active(): ethereum.CallResult<boolean> {
    let result = super.tryCall("active", "active():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  avatar(): Address {
    let result = super.call("avatar", "avatar():(address)", []);

    return result[0].toAddress();
  }

  try_avatar(): ethereum.CallResult<Address> {
    let result = super.tryCall("avatar", "avatar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bountyFor(_invitee: Address): BigInt {
    let result = super.call("bountyFor", "bountyFor(address):(uint256)", [
      ethereum.Value.fromAddress(_invitee)
    ]);

    return result[0].toBigInt();
  }

  try_bountyFor(_invitee: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bountyFor", "bountyFor(address):(uint256)", [
      ethereum.Value.fromAddress(_invitee)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCollectBountyFor(_invitee: Address): boolean {
    let result = super.call(
      "canCollectBountyFor",
      "canCollectBountyFor(address):(bool)",
      [ethereum.Value.fromAddress(_invitee)]
    );

    return result[0].toBoolean();
  }

  try_canCollectBountyFor(_invitee: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canCollectBountyFor",
      "canCollectBountyFor(address):(bool)",
      [ethereum.Value.fromAddress(_invitee)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  codeToUser(param0: Bytes): Address {
    let result = super.call("codeToUser", "codeToUser(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_codeToUser(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("codeToUser", "codeToUser(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInvitees(_inviter: Address): Array<Address> {
    let result = super.call("getInvitees", "getInvitees(address):(address[])", [
      ethereum.Value.fromAddress(_inviter)
    ]);

    return result[0].toAddressArray();
  }

  try_getInvitees(_inviter: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getInvitees",
      "getInvitees(address):(address[])",
      [ethereum.Value.fromAddress(_inviter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPendingBounties(_inviter: Address): BigInt {
    let result = super.call(
      "getPendingBounties",
      "getPendingBounties(address):(uint256)",
      [ethereum.Value.fromAddress(_inviter)]
    );

    return result[0].toBigInt();
  }

  try_getPendingBounties(_inviter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingBounties",
      "getPendingBounties(address):(uint256)",
      [ethereum.Value.fromAddress(_inviter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingInvitees(_inviter: Address): Array<Address> {
    let result = super.call(
      "getPendingInvitees",
      "getPendingInvitees(address):(address[])",
      [ethereum.Value.fromAddress(_inviter)]
    );

    return result[0].toAddressArray();
  }

  try_getPendingInvitees(
    _inviter: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPendingInvitees",
      "getPendingInvitees(address):(address[])",
      [ethereum.Value.fromAddress(_inviter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  goodDollar(): Address {
    let result = super.call("goodDollar", "goodDollar():(address)", []);

    return result[0].toAddress();
  }

  try_goodDollar(): ethereum.CallResult<Address> {
    let result = super.tryCall("goodDollar", "goodDollar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  identity(): Address {
    let result = super.call("identity", "identity():(address)", []);

    return result[0].toAddress();
  }

  try_identity(): ethereum.CallResult<Address> {
    let result = super.tryCall("identity", "identity():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  levelExpirationEnabled(): boolean {
    let result = super.call(
      "levelExpirationEnabled",
      "levelExpirationEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_levelExpirationEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "levelExpirationEnabled",
      "levelExpirationEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  levels(param0: BigInt): InvitesV1__levelsResult {
    let result = super.call(
      "levels",
      "levels(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new InvitesV1__levelsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_levels(param0: BigInt): ethereum.CallResult<InvitesV1__levelsResult> {
    let result = super.tryCall(
      "levels",
      "levels(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InvitesV1__levelsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stats(): InvitesV1__statsResult {
    let result = super.call("stats", "stats():(uint256,uint256,uint256)", []);

    return new InvitesV1__statsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_stats(): ethereum.CallResult<InvitesV1__statsResult> {
    let result = super.tryCall(
      "stats",
      "stats():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InvitesV1__statsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  users(param0: Address): InvitesV1__usersResult {
    let result = super.call(
      "users",
      "users(address):(address,bytes32,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new InvitesV1__usersResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<InvitesV1__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(address,bytes32,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InvitesV1__usersResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class BountyForCall extends ethereum.Call {
  get inputs(): BountyForCall__Inputs {
    return new BountyForCall__Inputs(this);
  }

  get outputs(): BountyForCall__Outputs {
    return new BountyForCall__Outputs(this);
  }
}

export class BountyForCall__Inputs {
  _call: BountyForCall;

  constructor(call: BountyForCall) {
    this._call = call;
  }

  get _invitee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BountyForCall__Outputs {
  _call: BountyForCall;

  constructor(call: BountyForCall) {
    this._call = call;
  }

  get bounty(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectBountiesCall extends ethereum.Call {
  get inputs(): CollectBountiesCall__Inputs {
    return new CollectBountiesCall__Inputs(this);
  }

  get outputs(): CollectBountiesCall__Outputs {
    return new CollectBountiesCall__Outputs(this);
  }
}

export class CollectBountiesCall__Inputs {
  _call: CollectBountiesCall;

  constructor(call: CollectBountiesCall) {
    this._call = call;
  }
}

export class CollectBountiesCall__Outputs {
  _call: CollectBountiesCall;

  constructor(call: CollectBountiesCall) {
    this._call = call;
  }
}

export class EndCall extends ethereum.Call {
  get inputs(): EndCall__Inputs {
    return new EndCall__Inputs(this);
  }

  get outputs(): EndCall__Outputs {
    return new EndCall__Outputs(this);
  }
}

export class EndCall__Inputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}

export class EndCall__Outputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _identity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gd(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get level0Bounty(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get _myCode(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _inviterCode(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class SetActiveCall extends ethereum.Call {
  get inputs(): SetActiveCall__Inputs {
    return new SetActiveCall__Inputs(this);
  }

  get outputs(): SetActiveCall__Outputs {
    return new SetActiveCall__Outputs(this);
  }
}

export class SetActiveCall__Inputs {
  _call: SetActiveCall;

  constructor(call: SetActiveCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetActiveCall__Outputs {
  _call: SetActiveCall;

  constructor(call: SetActiveCall) {
    this._call = call;
  }
}

export class SetLevelCall extends ethereum.Call {
  get inputs(): SetLevelCall__Inputs {
    return new SetLevelCall__Inputs(this);
  }

  get outputs(): SetLevelCall__Outputs {
    return new SetLevelCall__Outputs(this);
  }
}

export class SetLevelCall__Inputs {
  _call: SetLevelCall;

  constructor(call: SetLevelCall) {
    this._call = call;
  }

  get _lvl(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _toNext(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bounty(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _daysToComplete(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetLevelCall__Outputs {
  _call: SetLevelCall;

  constructor(call: SetLevelCall) {
    this._call = call;
  }
}

export class SetLevelExpirationEnabledCall extends ethereum.Call {
  get inputs(): SetLevelExpirationEnabledCall__Inputs {
    return new SetLevelExpirationEnabledCall__Inputs(this);
  }

  get outputs(): SetLevelExpirationEnabledCall__Outputs {
    return new SetLevelExpirationEnabledCall__Outputs(this);
  }
}

export class SetLevelExpirationEnabledCall__Inputs {
  _call: SetLevelExpirationEnabledCall;

  constructor(call: SetLevelExpirationEnabledCall) {
    this._call = call;
  }

  get _isEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetLevelExpirationEnabledCall__Outputs {
  _call: SetLevelExpirationEnabledCall;

  constructor(call: SetLevelExpirationEnabledCall) {
    this._call = call;
  }
}
