// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReputationEarned extends ethereum.Event {
  get params(): ReputationEarned__Params {
    return new ReputationEarned__Params(this);
  }
}

export class ReputationEarned__Params {
  _event: ReputationEarned;

  constructor(event: ReputationEarned) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeWithdraw extends ethereum.Event {
  get params(): StakeWithdraw__Params {
    return new StakeWithdraw__Params(this);
  }
}

export class StakeWithdraw__Params {
  _event: StakeWithdraw;

  constructor(event: StakeWithdraw) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get goodRewards(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get gdRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get donationRatio(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GoodDollarStaking__contractToUsersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewardDebt(): BigInt {
    return this.value1;
  }

  getRewardEarn(): BigInt {
    return this.value2;
  }

  getRewardMinted(): BigInt {
    return this.value3;
  }
}

export class GoodDollarStaking__earnedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEarnedRewards(): BigInt {
    return this.value0;
  }

  getEarnedRewardsAfterDonation(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__getProductivityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__getRewardsPerBlockResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_goodRewardPerBlock(): BigInt {
    return this.value0;
  }

  get_gdInterestRatePerBlock(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__getStakedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUserStake(): BigInt {
    return this.value0;
  }

  getTotalStaked(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__getUserPendingReward1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_goodReward(): BigInt {
    return this.value0;
  }

  get_gdRewardAfterDonation(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__goodStakerInfoResultUserInfoStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get rewardDebt(): BigInt {
    return this[1].toBigInt();
  }

  get rewardEarn(): BigInt {
    return this[2].toBigInt();
  }

  get rewardMinted(): BigInt {
    return this[3].toBigInt();
  }
}

export class GoodDollarStaking__stakersInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getDeposit(): BigInt {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }

  getRewardsPaid(): BigInt {
    return this.value2;
  }

  getRewardsDonated(): BigInt {
    return this.value3;
  }

  getAvgDonationRatio(): BigInt {
    return this.value4;
  }
}

export class GoodDollarStaking__statsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getLastUpdateBlock(): BigInt {
    return this.value0;
  }

  getTotalStaked(): BigInt {
    return this.value1;
  }

  getTotalShares(): BigInt {
    return this.value2;
  }

  getTotalRewardsPaid(): BigInt {
    return this.value3;
  }

  getTotalRewardsDonated(): BigInt {
    return this.value4;
  }

  getAvgDonationRatio(): BigInt {
    return this.value5;
  }

  getPrinciple(): BigInt {
    return this.value6;
  }
}

export class GoodDollarStaking__totalRewardsPerShare1Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_goodRewardPerShare(): BigInt {
    return this.value0;
  }

  get_gdRewardPerShare(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__withdrawRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGoodRewards(): BigInt {
    return this.value0;
  }

  getGdRewards(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking__withdrawStakeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGoodRewards(): BigInt {
    return this.value0;
  }

  getGdRewards(): BigInt {
    return this.value1;
  }
}

export class GoodDollarStaking extends ethereum.SmartContract {
  static bind(address: Address): GoodDollarStaking {
    return new GoodDollarStaking("GoodDollarStaking", address);
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint128)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHARE_DECIMALS(): BigInt {
    let result = super.call("SHARE_DECIMALS", "SHARE_DECIMALS():(uint128)", []);

    return result[0].toBigInt();
  }

  try_SHARE_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHARE_DECIMALS",
      "SHARE_DECIMALS():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHARE_PRECISION(): BigInt {
    let result = super.call(
      "SHARE_PRECISION",
      "SHARE_PRECISION():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_SHARE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SHARE_PRECISION",
      "SHARE_PRECISION():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  avatar(): Address {
    let result = super.call("avatar", "avatar():(address)", []);

    return result[0].toAddress();
  }

  try_avatar(): ethereum.CallResult<Address> {
    let result = super.tryCall("avatar", "avatar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractToUsers(
    param0: Address,
    param1: Address
  ): GoodDollarStaking__contractToUsersResult {
    let result = super.call(
      "contractToUsers",
      "contractToUsers(address,address):(uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new GoodDollarStaking__contractToUsersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_contractToUsers(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<GoodDollarStaking__contractToUsersResult> {
    let result = super.tryCall(
      "contractToUsers",
      "contractToUsers(address,address):(uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__contractToUsersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  createdAt(): BigInt {
    let result = super.call("createdAt", "createdAt():(uint128)", []);

    return result[0].toBigInt();
  }

  try_createdAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdAt", "createdAt():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dao(): Address {
    let result = super.call("dao", "dao():(address)", []);

    return result[0].toAddress();
  }

  try_dao(): ethereum.CallResult<Address> {
    let result = super.tryCall("dao", "dao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daysUntilUpgrade(): BigInt {
    let result = super.call(
      "daysUntilUpgrade",
      "daysUntilUpgrade():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_daysUntilUpgrade(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "daysUntilUpgrade",
      "daysUntilUpgrade():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  earned(_account: Address): GoodDollarStaking__earnedResult {
    let result = super.call("earned", "earned(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return new GoodDollarStaking__earnedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_earned(
    _account: Address
  ): ethereum.CallResult<GoodDollarStaking__earnedResult> {
    let result = super.tryCall("earned", "earned(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__earnedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getChainBlocksPerMonth(): BigInt {
    let result = super.call(
      "getChainBlocksPerMonth",
      "getChainBlocksPerMonth():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getChainBlocksPerMonth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainBlocksPerMonth",
      "getChainBlocksPerMonth():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrinciple(_account: Address): BigInt {
    let result = super.call("getPrinciple", "getPrinciple(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_getPrinciple(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrinciple",
      "getPrinciple(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProductivity(
    _contract: Address,
    _user: Address
  ): GoodDollarStaking__getProductivityResult {
    let result = super.call(
      "getProductivity",
      "getProductivity(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_contract), ethereum.Value.fromAddress(_user)]
    );

    return new GoodDollarStaking__getProductivityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getProductivity(
    _contract: Address,
    _user: Address
  ): ethereum.CallResult<GoodDollarStaking__getProductivityResult> {
    let result = super.tryCall(
      "getProductivity",
      "getProductivity(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_contract), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__getProductivityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRewardsDebt(): BigInt {
    let result = super.call("getRewardsDebt", "getRewardsDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRewardsDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardsDebt",
      "getRewardsDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardsPerBlock(): GoodDollarStaking__getRewardsPerBlockResult {
    let result = super.call(
      "getRewardsPerBlock",
      "getRewardsPerBlock():(uint256,uint256)",
      []
    );

    return new GoodDollarStaking__getRewardsPerBlockResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRewardsPerBlock(): ethereum.CallResult<
    GoodDollarStaking__getRewardsPerBlockResult
  > {
    let result = super.tryCall(
      "getRewardsPerBlock",
      "getRewardsPerBlock():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__getRewardsPerBlockResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getStaked(_user: Address): GoodDollarStaking__getStakedResult {
    let result = super.call(
      "getStaked",
      "getStaked(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new GoodDollarStaking__getStakedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStaked(
    _user: Address
  ): ethereum.CallResult<GoodDollarStaking__getStakedResult> {
    let result = super.tryCall(
      "getStaked",
      "getStaked(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__getStakedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUserPendingReward(
    _contract: Address,
    _blockStart: BigInt,
    _blockEnd: BigInt,
    _user: Address
  ): BigInt {
    let result = super.call(
      "getUserPendingReward",
      "getUserPendingReward(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(_blockStart),
        ethereum.Value.fromUnsignedBigInt(_blockEnd),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserPendingReward(
    _contract: Address,
    _blockStart: BigInt,
    _blockEnd: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserPendingReward",
      "getUserPendingReward(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(_blockStart),
        ethereum.Value.fromUnsignedBigInt(_blockEnd),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPendingReward1(
    _user: Address
  ): GoodDollarStaking__getUserPendingReward1Result {
    let result = super.call(
      "getUserPendingReward",
      "getUserPendingReward(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new GoodDollarStaking__getUserPendingReward1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserPendingReward1(
    _user: Address
  ): ethereum.CallResult<GoodDollarStaking__getUserPendingReward1Result> {
    let result = super.tryCall(
      "getUserPendingReward",
      "getUserPendingReward(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__getUserPendingReward1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  goodStakerInfo(
    _user: Address
  ): GoodDollarStaking__goodStakerInfoResultUserInfoStruct {
    let result = super.call(
      "goodStakerInfo",
      "goodStakerInfo(address):((uint128,uint128,uint128,uint128))",
      [ethereum.Value.fromAddress(_user)]
    );

    return changetype<GoodDollarStaking__goodStakerInfoResultUserInfoStruct>(
      result[0].toTuple()
    );
  }

  try_goodStakerInfo(
    _user: Address
  ): ethereum.CallResult<
    GoodDollarStaking__goodStakerInfoResultUserInfoStruct
  > {
    let result = super.tryCall(
      "goodStakerInfo",
      "goodStakerInfo(address):((uint128,uint128,uint128,uint128))",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GoodDollarStaking__goodStakerInfoResultUserInfoStruct>(
        value[0].toTuple()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestRatePerBlockX64(): BigInt {
    let result = super.call(
      "interestRatePerBlockX64",
      "interestRatePerBlockX64():(int128)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestRatePerBlockX64(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestRatePerBlockX64",
      "interestRatePerBlockX64():(int128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardBlock(param0: Address): BigInt {
    let result = super.call(
      "lastRewardBlock",
      "lastRewardBlock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastRewardBlock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBlock",
      "lastRewardBlock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameService(): Address {
    let result = super.call("nameService", "nameService():(address)", []);

    return result[0].toAddress();
  }

  try_nameService(): ethereum.CallResult<Address> {
    let result = super.tryCall("nameService", "nameService():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nativeToken(): Address {
    let result = super.call("nativeToken", "nativeToken():(address)", []);

    return result[0].toAddress();
  }

  try_nativeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("nativeToken", "nativeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numberOfBlocksPerYear(): BigInt {
    let result = super.call(
      "numberOfBlocksPerYear",
      "numberOfBlocksPerYear():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfBlocksPerYear(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfBlocksPerYear",
      "numberOfBlocksPerYear():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onTokenTransfer(_from: Address, _amount: BigInt, data: Bytes): boolean {
    let result = super.call(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTokenTransfer(
    _from: Address,
    _amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardsMintedSoFar(param0: Address): BigInt {
    let result = super.call(
      "rewardsMintedSoFar",
      "rewardsMintedSoFar(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardsMintedSoFar(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsMintedSoFar",
      "rewardsMintedSoFar(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsPerBlock(param0: Address): BigInt {
    let result = super.call(
      "rewardsPerBlock",
      "rewardsPerBlock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardsPerBlock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsPerBlock",
      "rewardsPerBlock(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharePrice(): BigInt {
    let result = super.call("sharePrice", "sharePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sharePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sharePrice", "sharePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakersInfo(param0: Address): GoodDollarStaking__stakersInfoResult {
    let result = super.call(
      "stakersInfo",
      "stakersInfo(address):(uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GoodDollarStaking__stakersInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_stakersInfo(
    param0: Address
  ): ethereum.CallResult<GoodDollarStaking__stakersInfoResult> {
    let result = super.tryCall(
      "stakersInfo",
      "stakersInfo(address):(uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__stakersInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  stats(): GoodDollarStaking__statsResult {
    let result = super.call(
      "stats",
      "stats():(uint128,uint128,uint128,uint128,uint128,uint128,uint256)",
      []
    );

    return new GoodDollarStaking__statsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_stats(): ethereum.CallResult<GoodDollarStaking__statsResult> {
    let result = super.tryCall(
      "stats",
      "stats():(uint128,uint128,uint128,uint128,uint128,uint128,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__statsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalRewardsAccumulated(param0: Address): BigInt {
    let result = super.call(
      "totalRewardsAccumulated",
      "totalRewardsAccumulated(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalRewardsAccumulated(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsAccumulated",
      "totalRewardsAccumulated(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsPerShare(_contract: Address): BigInt {
    let result = super.call(
      "totalRewardsPerShare",
      "totalRewardsPerShare(address):(uint256)",
      [ethereum.Value.fromAddress(_contract)]
    );

    return result[0].toBigInt();
  }

  try_totalRewardsPerShare(_contract: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsPerShare",
      "totalRewardsPerShare(address):(uint256)",
      [ethereum.Value.fromAddress(_contract)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsPerShare1(): GoodDollarStaking__totalRewardsPerShare1Result {
    let result = super.call(
      "totalRewardsPerShare",
      "totalRewardsPerShare():(uint256,uint256)",
      []
    );

    return new GoodDollarStaking__totalRewardsPerShare1Result(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalRewardsPerShare1(): ethereum.CallResult<
    GoodDollarStaking__totalRewardsPerShare1Result
  > {
    let result = super.tryCall(
      "totalRewardsPerShare",
      "totalRewardsPerShare():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__totalRewardsPerShare1Result(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawRewards(): GoodDollarStaking__withdrawRewardsResult {
    let result = super.call(
      "withdrawRewards",
      "withdrawRewards():(uint256,uint256)",
      []
    );

    return new GoodDollarStaking__withdrawRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawRewards(): ethereum.CallResult<
    GoodDollarStaking__withdrawRewardsResult
  > {
    let result = super.tryCall(
      "withdrawRewards",
      "withdrawRewards():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__withdrawRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  withdrawStake(_amount: BigInt): GoodDollarStaking__withdrawStakeResult {
    let result = super.call(
      "withdrawStake",
      "withdrawStake(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return new GoodDollarStaking__withdrawStakeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawStake(
    _amount: BigInt
  ): ethereum.CallResult<GoodDollarStaking__withdrawStakeResult> {
    let result = super.tryCall(
      "withdrawStake",
      "withdrawStake(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarStaking__withdrawStakeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ns(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interestRatePerBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _numberOfBlocksPerYear(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _daysUntilUpgrade(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetGdApyCall extends ethereum.Call {
  get inputs(): SetGdApyCall__Inputs {
    return new SetGdApyCall__Inputs(this);
  }

  get outputs(): SetGdApyCall__Outputs {
    return new SetGdApyCall__Outputs(this);
  }
}

export class SetGdApyCall__Inputs {
  _call: SetGdApyCall;

  constructor(call: SetGdApyCall) {
    this._call = call;
  }

  get _interestRatePerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGdApyCall__Outputs {
  _call: SetGdApyCall;

  constructor(call: SetGdApyCall) {
    this._call = call;
  }
}

export class SetMonthlyGOODRewardsCall extends ethereum.Call {
  get inputs(): SetMonthlyGOODRewardsCall__Inputs {
    return new SetMonthlyGOODRewardsCall__Inputs(this);
  }

  get outputs(): SetMonthlyGOODRewardsCall__Outputs {
    return new SetMonthlyGOODRewardsCall__Outputs(this);
  }
}

export class SetMonthlyGOODRewardsCall__Inputs {
  _call: SetMonthlyGOODRewardsCall;

  constructor(call: SetMonthlyGOODRewardsCall) {
    this._call = call;
  }

  get _monthlyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMonthlyGOODRewardsCall__Outputs {
  _call: SetMonthlyGOODRewardsCall;

  constructor(call: SetMonthlyGOODRewardsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _donationRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateAvatarCall extends ethereum.Call {
  get inputs(): UpdateAvatarCall__Inputs {
    return new UpdateAvatarCall__Inputs(this);
  }

  get outputs(): UpdateAvatarCall__Outputs {
    return new UpdateAvatarCall__Outputs(this);
  }
}

export class UpdateAvatarCall__Inputs {
  _call: UpdateAvatarCall;

  constructor(call: UpdateAvatarCall) {
    this._call = call;
  }
}

export class UpdateAvatarCall__Outputs {
  _call: UpdateAvatarCall;

  constructor(call: UpdateAvatarCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall extends ethereum.Call {
  get inputs(): WithdrawRewardsCall__Inputs {
    return new WithdrawRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawRewardsCall__Outputs {
    return new WithdrawRewardsCall__Outputs(this);
  }
}

export class WithdrawRewardsCall__Inputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }
}

export class WithdrawRewardsCall__Outputs {
  _call: WithdrawRewardsCall;

  constructor(call: WithdrawRewardsCall) {
    this._call = call;
  }

  get goodRewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get gdRewards(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawStakeCall extends ethereum.Call {
  get inputs(): WithdrawStakeCall__Inputs {
    return new WithdrawStakeCall__Inputs(this);
  }

  get outputs(): WithdrawStakeCall__Outputs {
    return new WithdrawStakeCall__Outputs(this);
  }
}

export class WithdrawStakeCall__Inputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawStakeCall__Outputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }

  get goodRewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get gdRewards(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
