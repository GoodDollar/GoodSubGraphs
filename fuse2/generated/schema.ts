// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Minter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Minter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Minter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Minter", id.toString(), this);
    }
  }

  static load(id: string): Minter | null {
    return changetype<Minter | null>(store.get("Minter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalMintCap(): BigInt {
    let value = this.get("totalMintCap");
    return value!.toBigInt();
  }

  set totalMintCap(value: BigInt) {
    this.set("totalMintCap", Value.fromBigInt(value));
  }

  get perTxCap(): BigInt {
    let value = this.get("perTxCap");
    return value!.toBigInt();
  }

  set perTxCap(value: BigInt) {
    this.set("perTxCap", Value.fromBigInt(value));
  }

  get bps(): BigInt {
    let value = this.get("bps");
    return value!.toBigInt();
  }

  set bps(value: BigInt) {
    this.set("bps", Value.fromBigInt(value));
  }

  get isRewardsRole(): BigInt {
    let value = this.get("isRewardsRole");
    return value!.toBigInt();
  }

  set isRewardsRole(value: BigInt) {
    this.set("isRewardsRole", Value.fromBigInt(value));
  }

  get totalMinted(): BigInt {
    let value = this.get("totalMinted");
    return value!.toBigInt();
  }

  set totalMinted(value: BigInt) {
    this.set("totalMinted", Value.fromBigInt(value));
  }

  get totalBurned(): BigInt {
    let value = this.get("totalBurned");
    return value!.toBigInt();
  }

  set totalBurned(value: BigInt) {
    this.set("totalBurned", Value.fromBigInt(value));
  }
}

export class MintBurnStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintBurnStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintBurnStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintBurnStats", id.toString(), this);
    }
  }

  static load(id: string): MintBurnStats | null {
    return changetype<MintBurnStats | null>(store.get("MintBurnStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalMintCap(): BigInt | null {
    let value = this.get("totalMintCap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalMintCap(value: BigInt | null) {
    if (!value) {
      this.unset("totalMintCap");
    } else {
      this.set("totalMintCap", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalMinted(): BigInt | null {
    let value = this.get("totalMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalMinted(value: BigInt | null) {
    if (!value) {
      this.unset("totalMinted");
    } else {
      this.set("totalMinted", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalMintDebt(): BigInt | null {
    let value = this.get("totalMintDebt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalMintDebt(value: BigInt | null) {
    if (!value) {
      this.unset("totalMintDebt");
    } else {
      this.set("totalMintDebt", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalRewards(): BigInt | null {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt | null) {
    if (!value) {
      this.unset("totalRewards");
    } else {
      this.set("totalRewards", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalBurned(): BigInt | null {
    let value = this.get("totalBurned");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBurned(value: BigInt | null) {
    if (!value) {
      this.unset("totalBurned");
    } else {
      this.set("totalBurned", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class InvitesStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvitesStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InvitesStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InvitesStats", id.toString(), this);
    }
  }

  static load(id: string): InvitesStats | null {
    return changetype<InvitesStats | null>(store.get("InvitesStats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalApprovedInvites(): BigInt | null {
    let value = this.get("totalApprovedInvites");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalApprovedInvites(value: BigInt | null) {
    if (!value) {
      this.unset("totalApprovedInvites");
    } else {
      this.set("totalApprovedInvites", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalBountiesPaid(): BigInt | null {
    let value = this.get("totalBountiesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBountiesPaid(value: BigInt | null) {
    if (!value) {
      this.unset("totalBountiesPaid");
    } else {
      this.set("totalBountiesPaid", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalInvited(): BigInt | null {
    let value = this.get("totalInvited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalInvited(value: BigInt | null) {
    if (!value) {
      this.unset("totalInvited");
    } else {
      this.set("totalInvited", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get invitedBy(): Bytes {
    let value = this.get("invitedBy");
    return value!.toBytes();
  }

  set invitedBy(value: Bytes) {
    this.set("invitedBy", Value.fromBytes(value));
  }

  get bountyPaid(): boolean {
    let value = this.get("bountyPaid");
    return value!.toBoolean();
  }

  set bountyPaid(value: boolean) {
    this.set("bountyPaid", Value.fromBoolean(value));
  }

  get invitees(): Array<Bytes> {
    let value = this.get("invitees");
    return value!.toBytesArray();
  }

  set invitees(value: Array<Bytes>) {
    this.set("invitees", Value.fromBytesArray(value));
  }

  get pending(): Array<Bytes> {
    let value = this.get("pending");
    return value!.toBytesArray();
  }

  set pending(value: Array<Bytes>) {
    this.set("pending", Value.fromBytesArray(value));
  }

  get level(): BigInt {
    let value = this.get("level");
    return value!.toBigInt();
  }

  set level(value: BigInt) {
    this.set("level", Value.fromBigInt(value));
  }

  get levelStarted(): BigInt {
    let value = this.get("levelStarted");
    return value!.toBigInt();
  }

  set levelStarted(value: BigInt) {
    this.set("levelStarted", Value.fromBigInt(value));
  }

  get totalMadeInvites(): BigInt {
    let value = this.get("totalMadeInvites");
    return value!.toBigInt();
  }

  set totalMadeInvites(value: BigInt) {
    this.set("totalMadeInvites", Value.fromBigInt(value));
  }

  get totalApprovedInvites(): BigInt {
    let value = this.get("totalApprovedInvites");
    return value!.toBigInt();
  }

  set totalApprovedInvites(value: BigInt) {
    this.set("totalApprovedInvites", Value.fromBigInt(value));
  }

  get totalEarnedAsInviter(): BigInt {
    let value = this.get("totalEarnedAsInviter");
    return value!.toBigInt();
  }

  set totalEarnedAsInviter(value: BigInt) {
    this.set("totalEarnedAsInviter", Value.fromBigInt(value));
  }

  get joinedAt(): BigInt {
    let value = this.get("joinedAt");
    return value!.toBigInt();
  }

  set joinedAt(value: BigInt) {
    this.set("joinedAt", Value.fromBigInt(value));
  }

  get earnedAsInvitee(): BigInt {
    let value = this.get("earnedAsInvitee");
    return value!.toBigInt();
  }

  set earnedAsInvitee(value: BigInt) {
    this.set("earnedAsInvitee", Value.fromBigInt(value));
  }
}
