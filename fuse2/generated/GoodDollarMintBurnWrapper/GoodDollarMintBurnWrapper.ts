// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinterSet extends ethereum.Event {
  get params(): MinterSet__Params {
    return new MinterSet__Params(this);
  }
}

export class MinterSet__Params {
  _event: MinterSet;

  constructor(event: MinterSet) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalMintCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get perTxCap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bps(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rewardsRole(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get isUpdate(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SendOrMint extends ethereum.Event {
  get params(): SendOrMint__Params {
    return new SendOrMint__Params(this);
  }
}

export class SendOrMint__Params {
  _event: SendOrMint;

  constructor(event: SendOrMint) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get minted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outstandingMintDebt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GoodDollarMintBurnWrapper__minterSupplyResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getMax(): BigInt {
    return this.value0;
  }

  getCap(): BigInt {
    return this.value1;
  }

  getTotal(): BigInt {
    return this.value2;
  }

  getDailyCap(): BigInt {
    return this.value3;
  }

  getMintedToday(): BigInt {
    return this.value4;
  }

  getLastUpdate(): BigInt {
    return this.value5;
  }

  getTotalRewards(): BigInt {
    return this.value6;
  }

  getBpsPerDay(): BigInt {
    return this.value7;
  }
}

export class GoodDollarMintBurnWrapper extends ethereum.SmartContract {
  static bind(address: Address): GoodDollarMintBurnWrapper {
    return new GoodDollarMintBurnWrapper("GoodDollarMintBurnWrapper", address);
  }

  BRIDGE_ROLE(): Bytes {
    let result = super.call("BRIDGE_ROLE", "BRIDGE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BRIDGE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BRIDGE_ROLE", "BRIDGE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GUARDIAN_ROLE(): Bytes {
    let result = super.call("GUARDIAN_ROLE", "GUARDIAN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_GUARDIAN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "GUARDIAN_ROLE",
      "GUARDIAN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSE_ALL_ROLE(): Bytes {
    let result = super.call("PAUSE_ALL_ROLE", "PAUSE_ALL_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSE_ALL_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_ALL_ROLE",
      "PAUSE_ALL_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSE_BURN_ROLE(): Bytes {
    let result = super.call(
      "PAUSE_BURN_ROLE",
      "PAUSE_BURN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PAUSE_BURN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_BURN_ROLE",
      "PAUSE_BURN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSE_MINT_ROLE(): Bytes {
    let result = super.call(
      "PAUSE_MINT_ROLE",
      "PAUSE_MINT_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PAUSE_MINT_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_MINT_ROLE",
      "PAUSE_MINT_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSE_REWARDS_ROLE(): Bytes {
    let result = super.call(
      "PAUSE_REWARDS_ROLE",
      "PAUSE_REWARDS_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PAUSE_REWARDS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_REWARDS_ROLE",
      "PAUSE_REWARDS_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSE_ROUTER_ROLE(): Bytes {
    let result = super.call(
      "PAUSE_ROUTER_ROLE",
      "PAUSE_ROUTER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PAUSE_ROUTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PAUSE_ROUTER_ROLE",
      "PAUSE_ROUTER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REWARDS_ROLE(): Bytes {
    let result = super.call("REWARDS_ROLE", "REWARDS_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_REWARDS_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("REWARDS_ROLE", "REWARDS_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROUTER_ROLE(): Bytes {
    let result = super.call("ROUTER_ROLE", "ROUTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROUTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ROUTER_ROLE", "ROUTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  avatar(): Address {
    let result = super.call("avatar", "avatar():(address)", []);

    return result[0].toAddress();
  }

  try_avatar(): ethereum.CallResult<Address> {
    let result = super.tryCall("avatar", "avatar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(from: Address, amount: BigInt): boolean {
    let result = super.call("burn", "burn(address,uint256):(bool)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_burn(from: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(address,uint256):(bool)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentDay(): BigInt {
    let result = super.call("currentDay", "currentDay():(uint128)", []);

    return result[0].toBigInt();
  }

  try_currentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentDay", "currentDay():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dao(): Address {
    let result = super.call("dao", "dao():(address)", []);

    return result[0].toAddress();
  }

  try_dao(): ethereum.CallResult<Address> {
    let result = super.tryCall("dao", "dao():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(to: Address, amount: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_mint(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minterSupply(param0: Address): GoodDollarMintBurnWrapper__minterSupplyResult {
    let result = super.call(
      "minterSupply",
      "minterSupply(address):(uint256,uint256,uint256,uint128,uint128,uint128,uint128,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GoodDollarMintBurnWrapper__minterSupplyResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_minterSupply(
    param0: Address
  ): ethereum.CallResult<GoodDollarMintBurnWrapper__minterSupplyResult> {
    let result = super.tryCall(
      "minterSupply",
      "minterSupply(address):(uint256,uint256,uint256,uint128,uint128,uint128,uint128,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GoodDollarMintBurnWrapper__minterSupplyResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameService(): Address {
    let result = super.call("nameService", "nameService():(address)", []);

    return result[0].toAddress();
  }

  try_nameService(): ethereum.CallResult<Address> {
    let result = super.tryCall("nameService", "nameService():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nativeToken(): Address {
    let result = super.call("nativeToken", "nativeToken():(address)", []);

    return result[0].toAddress();
  }

  try_nativeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("nativeToken", "nativeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onTokenTransfer(sender: Address, amount: BigInt, data: Bytes): boolean {
    let result = super.call(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTokenTransfer(
    sender: Address,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(role: Bytes): boolean {
    let result = super.call("paused", "paused(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBoolean();
  }

  try_paused(role: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sendOrMint(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "sendOrMint",
      "sendOrMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_sendOrMint(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sendOrMint",
      "sendOrMint(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalMintCap(): BigInt {
    let result = super.call("totalMintCap", "totalMintCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMintCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalMintCap", "totalMintCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMintDebt(): BigInt {
    let result = super.call("totalMintDebt", "totalMintDebt():(uint128)", []);

    return result[0].toBigInt();
  }

  try_totalMintDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMintDebt",
      "totalMintDebt():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMinted(): BigInt {
    let result = super.call("totalMinted", "totalMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalMinted", "totalMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint128)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateFrequency(): BigInt {
    let result = super.call(
      "updateFrequency",
      "updateFrequency():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateFrequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateFrequency",
      "updateFrequency():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get globalLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get perTxLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bpsPerDay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get withRewardsRole(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _totalMintCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nameService(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SendOrMintCall extends ethereum.Call {
  get inputs(): SendOrMintCall__Inputs {
    return new SendOrMintCall__Inputs(this);
  }

  get outputs(): SendOrMintCall__Outputs {
    return new SendOrMintCall__Outputs(this);
  }
}

export class SendOrMintCall__Inputs {
  _call: SendOrMintCall;

  constructor(call: SendOrMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SendOrMintCall__Outputs {
  _call: SendOrMintCall;

  constructor(call: SendOrMintCall) {
    this._call = call;
  }

  get totalSent(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetMinterCapsCall extends ethereum.Call {
  get inputs(): SetMinterCapsCall__Inputs {
    return new SetMinterCapsCall__Inputs(this);
  }

  get outputs(): SetMinterCapsCall__Outputs {
    return new SetMinterCapsCall__Outputs(this);
  }
}

export class SetMinterCapsCall__Inputs {
  _call: SetMinterCapsCall;

  constructor(call: SetMinterCapsCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get globalLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get perTxLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bpsPerDay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetMinterCapsCall__Outputs {
  _call: SetMinterCapsCall;

  constructor(call: SetMinterCapsCall) {
    this._call = call;
  }
}

export class SetTotalMintCapCall extends ethereum.Call {
  get inputs(): SetTotalMintCapCall__Inputs {
    return new SetTotalMintCapCall__Inputs(this);
  }

  get outputs(): SetTotalMintCapCall__Outputs {
    return new SetTotalMintCapCall__Outputs(this);
  }
}

export class SetTotalMintCapCall__Inputs {
  _call: SetTotalMintCapCall;

  constructor(call: SetTotalMintCapCall) {
    this._call = call;
  }

  get cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTotalMintCapCall__Outputs {
  _call: SetTotalMintCapCall;

  constructor(call: SetTotalMintCapCall) {
    this._call = call;
  }
}

export class SetUpdateFrequencyCall extends ethereum.Call {
  get inputs(): SetUpdateFrequencyCall__Inputs {
    return new SetUpdateFrequencyCall__Inputs(this);
  }

  get outputs(): SetUpdateFrequencyCall__Outputs {
    return new SetUpdateFrequencyCall__Outputs(this);
  }
}

export class SetUpdateFrequencyCall__Inputs {
  _call: SetUpdateFrequencyCall;

  constructor(call: SetUpdateFrequencyCall) {
    this._call = call;
  }

  get inSeconds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUpdateFrequencyCall__Outputs {
  _call: SetUpdateFrequencyCall;

  constructor(call: SetUpdateFrequencyCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateAvatarCall extends ethereum.Call {
  get inputs(): UpdateAvatarCall__Inputs {
    return new UpdateAvatarCall__Inputs(this);
  }

  get outputs(): UpdateAvatarCall__Outputs {
    return new UpdateAvatarCall__Outputs(this);
  }
}

export class UpdateAvatarCall__Inputs {
  _call: UpdateAvatarCall;

  constructor(call: UpdateAvatarCall) {
    this._call = call;
  }
}

export class UpdateAvatarCall__Outputs {
  _call: UpdateAvatarCall;

  constructor(call: UpdateAvatarCall) {
    this._call = call;
  }
}

export class Upgrade1Call extends ethereum.Call {
  get inputs(): Upgrade1Call__Inputs {
    return new Upgrade1Call__Inputs(this);
  }

  get outputs(): Upgrade1Call__Outputs {
    return new Upgrade1Call__Outputs(this);
  }
}

export class Upgrade1Call__Inputs {
  _call: Upgrade1Call;

  constructor(call: Upgrade1Call) {
    this._call = call;
  }
}

export class Upgrade1Call__Outputs {
  _call: Upgrade1Call;

  constructor(call: Upgrade1Call) {
    this._call = call;
  }
}

export class Upgrade2Call extends ethereum.Call {
  get inputs(): Upgrade2Call__Inputs {
    return new Upgrade2Call__Inputs(this);
  }

  get outputs(): Upgrade2Call__Outputs {
    return new Upgrade2Call__Outputs(this);
  }
}

export class Upgrade2Call__Inputs {
  _call: Upgrade2Call;

  constructor(call: Upgrade2Call) {
    this._call = call;
  }
}

export class Upgrade2Call__Outputs {
  _call: Upgrade2Call;

  constructor(call: Upgrade2Call) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
