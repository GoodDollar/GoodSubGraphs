// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActivatedUser extends ethereum.Event {
  get params(): ActivatedUser__Params {
    return new ActivatedUser__Params(this);
  }
}

export class ActivatedUser__Params {
  _event: ActivatedUser;

  constructor(event: ActivatedUser) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class InactiveUserFished extends ethereum.Event {
  get params(): InactiveUserFished__Params {
    return new InactiveUserFished__Params(this);
  }
}

export class InactiveUserFished__Params {
  _event: InactiveUserFished;

  constructor(event: InactiveUserFished) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fished_account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get claimAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SchemeEnded extends ethereum.Event {
  get params(): SchemeEnded__Params {
    return new SchemeEnded__Params(this);
  }
}

export class SchemeEnded__Params {
  _event: SchemeEnded;

  constructor(event: SchemeEnded) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SchemeStarted extends ethereum.Event {
  get params(): SchemeStarted__Params {
    return new SchemeStarted__Params(this);
  }
}

export class SchemeStarted__Params {
  _event: SchemeStarted;

  constructor(event: SchemeStarted) {
    this._event = event;
  }

  get by(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalFished extends ethereum.Event {
  get params(): TotalFished__Params {
    return new TotalFished__Params(this);
  }
}

export class TotalFished__Params {
  _event: TotalFished;

  constructor(event: TotalFished) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UBICalculated extends ethereum.Event {
  get params(): UBICalculated__Params {
    return new UBICalculated__Params(this);
  }
}

export class UBICalculated__Params {
  _event: UBICalculated;

  constructor(event: UBICalculated) {
    this._event = event;
  }

  get day(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dailyUbi(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UBIClaimed extends ethereum.Event {
  get params(): UBIClaimed__Params {
    return new UBIClaimed__Params(this);
  }
}

export class UBIClaimed__Params {
  _event: UBIClaimed;

  constructor(event: UBIClaimed) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UBICycleCalculated extends ethereum.Event {
  get params(): UBICycleCalculated__Params {
    return new UBICycleCalculated__Params(this);
  }
}

export class UBICycleCalculated__Params {
  _event: UBICycleCalculated;

  constructor(event: UBICycleCalculated) {
    this._event = event;
  }

  get day(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pool(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cycleLength(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dailyUBIPool(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UBIEnded extends ethereum.Event {
  get params(): UBIEnded__Params {
    return new UBIEnded__Params(this);
  }
}

export class UBIEnded__Params {
  _event: UBIEnded;

  constructor(event: UBIEnded) {
    this._event = event;
  }

  get claimers(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get claimamount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UBIStarted extends ethereum.Event {
  get params(): UBIStarted__Params {
    return new UBIStarted__Params(this);
  }
}

export class UBIStarted__Params {
  _event: UBIStarted;

  constructor(event: UBIStarted) {
    this._event = event;
  }

  get balance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawFromDao extends ethereum.Event {
  get params(): WithdrawFromDao__Params {
    return new WithdrawFromDao__Params(this);
  }
}

export class WithdrawFromDao__Params {
  _event: WithdrawFromDao;

  constructor(event: WithdrawFromDao) {
    this._event = event;
  }

  get prevBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UBIScheme__dailyUBIHistoryResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class UBIScheme__getDailyStatsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class UBIScheme extends ethereum.SmartContract {
  static bind(address: Address): UBIScheme {
    return new UBIScheme("UBIScheme", address);
  }

  activeUsersCount(): BigInt {
    let result = super.call(
      "activeUsersCount",
      "activeUsersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_activeUsersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeUsersCount",
      "activeUsersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimDistribution(): BigInt {
    let result = super.call(
      "claimDistribution",
      "claimDistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimDistribution",
      "claimDistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentCycleLength(): BigInt {
    let result = super.call(
      "currentCycleLength",
      "currentCycleLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentCycleLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentCycleLength",
      "currentCycleLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDay(): BigInt {
    let result = super.call("currentDay", "currentDay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentDay", "currentDay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cycleLength(): BigInt {
    let result = super.call("cycleLength", "cycleLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cycleLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cycleLength", "cycleLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyCyclePool(): BigInt {
    let result = super.call("dailyCyclePool", "dailyCyclePool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dailyCyclePool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyCyclePool",
      "dailyCyclePool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dailyUBIHistory(param0: BigInt): UBIScheme__dailyUBIHistoryResult {
    let result = super.call(
      "dailyUBIHistory",
      "dailyUBIHistory(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new UBIScheme__dailyUBIHistoryResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_dailyUBIHistory(
    param0: BigInt
  ): ethereum.CallResult<UBIScheme__dailyUBIHistoryResult> {
    let result = super.tryCall(
      "dailyUBIHistory",
      "dailyUBIHistory(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UBIScheme__dailyUBIHistoryResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  dailyUbi(): BigInt {
    let result = super.call("dailyUbi", "dailyUbi():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dailyUbi(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dailyUbi", "dailyUbi():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstClaimPool(): Address {
    let result = super.call("firstClaimPool", "firstClaimPool():(address)", []);

    return result[0].toAddress();
  }

  try_firstClaimPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "firstClaimPool",
      "firstClaimPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fishedUsersAddresses(param0: Address): boolean {
    let result = super.call(
      "fishedUsersAddresses",
      "fishedUsersAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_fishedUsersAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "fishedUsersAddresses",
      "fishedUsersAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClaimAmount(day: BigInt): BigInt {
    let result = super.call(
      "getClaimAmount",
      "getClaimAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(day)]
    );

    return result[0].toBigInt();
  }

  try_getClaimAmount(day: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimAmount",
      "getClaimAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(day)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimerCount(day: BigInt): BigInt {
    let result = super.call(
      "getClaimerCount",
      "getClaimerCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(day)]
    );

    return result[0].toBigInt();
  }

  try_getClaimerCount(day: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimerCount",
      "getClaimerCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(day)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDailyStats(): UBIScheme__getDailyStatsResult {
    let result = super.call(
      "getDailyStats",
      "getDailyStats():(uint256,uint256)",
      []
    );

    return new UBIScheme__getDailyStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getDailyStats(): ethereum.CallResult<UBIScheme__getDailyStatsResult> {
    let result = super.tryCall(
      "getDailyStats",
      "getDailyStats():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UBIScheme__getDailyStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  identity(): Address {
    let result = super.call("identity", "identity():(address)", []);

    return result[0].toAddress();
  }

  try_identity(): ethereum.CallResult<Address> {
    let result = super.tryCall("identity", "identity():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegistered(): boolean {
    let result = super.call("isRegistered", "isRegistered():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRegistered(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRegistered", "isRegistered():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRegistered1(scheme: Address): boolean {
    let result = super.call("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(scheme)
    ]);

    return result[0].toBoolean();
  }

  try_isRegistered1(scheme: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRegistered", "isRegistered(address):(bool)", [
      ethereum.Value.fromAddress(scheme)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  iterationGasLimit(): BigInt {
    let result = super.call(
      "iterationGasLimit",
      "iterationGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_iterationGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "iterationGasLimit",
      "iterationGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastClaimed(param0: Address): BigInt {
    let result = super.call("lastClaimed", "lastClaimed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastClaimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastClaimed",
      "lastClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastWithdrawDay(): BigInt {
    let result = super.call(
      "lastWithdrawDay",
      "lastWithdrawDay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastWithdrawDay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastWithdrawDay",
      "lastWithdrawDay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxInactiveDays(): BigInt {
    let result = super.call(
      "maxInactiveDays",
      "maxInactiveDays():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxInactiveDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxInactiveDays",
      "maxInactiveDays():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodEnd(): BigInt {
    let result = super.call("periodEnd", "periodEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodEnd", "periodEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodStart(): BigInt {
    let result = super.call("periodStart", "periodStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodStart", "periodStart():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shouldWithdrawFromDAO(): boolean {
    let result = super.call(
      "shouldWithdrawFromDAO",
      "shouldWithdrawFromDAO():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_shouldWithdrawFromDAO(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldWithdrawFromDAO",
      "shouldWithdrawFromDAO():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startOfCycle(): BigInt {
    let result = super.call("startOfCycle", "startOfCycle():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startOfCycle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startOfCycle", "startOfCycle():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalClaimsPerUser(param0: Address): BigInt {
    let result = super.call(
      "totalClaimsPerUser",
      "totalClaimsPerUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalClaimsPerUser(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalClaimsPerUser",
      "totalClaimsPerUser(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDayInCycle(): BigInt {
    let result = super.call(
      "currentDayInCycle",
      "currentDayInCycle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentDayInCycle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentDayInCycle",
      "currentDayInCycle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasClaimed(account: Address): boolean {
    let result = super.call("hasClaimed", "hasClaimed(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasClaimed(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasClaimed", "hasClaimed(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNotNewUser(_account: Address): boolean {
    let result = super.call("isNotNewUser", "isNotNewUser(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_isNotNewUser(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNotNewUser", "isNotNewUser(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActiveUser(_account: Address): boolean {
    let result = super.call("isActiveUser", "isActiveUser(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_isActiveUser(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActiveUser", "isActiveUser(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkEntitlement(): BigInt {
    let result = super.call(
      "checkEntitlement",
      "checkEntitlement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_checkEntitlement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkEntitlement",
      "checkEntitlement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(): boolean {
    let result = super.call("claim", "claim():(bool)", []);

    return result[0].toBoolean();
  }

  try_claim(): ethereum.CallResult<boolean> {
    let result = super.tryCall("claim", "claim():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fish(_account: Address): boolean {
    let result = super.call("fish", "fish(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_fish(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("fish", "fish(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fishMulti(_accounts: Array<Address>): BigInt {
    let result = super.call("fishMulti", "fishMulti(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(_accounts)
    ]);

    return result[0].toBigInt();
  }

  try_fishMulti(_accounts: Array<Address>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fishMulti", "fishMulti(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(_accounts)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _identity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _firstClaimPool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _periodStart(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _periodEnd(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxInactiveDays(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _cycleLength(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAvatarCall extends ethereum.Call {
  get inputs(): SetAvatarCall__Inputs {
    return new SetAvatarCall__Inputs(this);
  }

  get outputs(): SetAvatarCall__Outputs {
    return new SetAvatarCall__Outputs(this);
  }
}

export class SetAvatarCall__Inputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAvatarCall__Outputs {
  _call: SetAvatarCall;

  constructor(call: SetAvatarCall) {
    this._call = call;
  }
}

export class SetIdentityCall extends ethereum.Call {
  get inputs(): SetIdentityCall__Inputs {
    return new SetIdentityCall__Inputs(this);
  }

  get outputs(): SetIdentityCall__Outputs {
    return new SetIdentityCall__Outputs(this);
  }
}

export class SetIdentityCall__Inputs {
  _call: SetIdentityCall;

  constructor(call: SetIdentityCall) {
    this._call = call;
  }

  get _identity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIdentityCall__Outputs {
  _call: SetIdentityCall;

  constructor(call: SetIdentityCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetCycleLengthCall extends ethereum.Call {
  get inputs(): SetCycleLengthCall__Inputs {
    return new SetCycleLengthCall__Inputs(this);
  }

  get outputs(): SetCycleLengthCall__Outputs {
    return new SetCycleLengthCall__Outputs(this);
  }
}

export class SetCycleLengthCall__Inputs {
  _call: SetCycleLengthCall;

  constructor(call: SetCycleLengthCall) {
    this._call = call;
  }

  get _newLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCycleLengthCall__Outputs {
  _call: SetCycleLengthCall;

  constructor(call: SetCycleLengthCall) {
    this._call = call;
  }
}

export class SetDayCall extends ethereum.Call {
  get inputs(): SetDayCall__Inputs {
    return new SetDayCall__Inputs(this);
  }

  get outputs(): SetDayCall__Outputs {
    return new SetDayCall__Outputs(this);
  }
}

export class SetDayCall__Inputs {
  _call: SetDayCall;

  constructor(call: SetDayCall) {
    this._call = call;
  }
}

export class SetDayCall__Outputs {
  _call: SetDayCall;

  constructor(call: SetDayCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FishCall extends ethereum.Call {
  get inputs(): FishCall__Inputs {
    return new FishCall__Inputs(this);
  }

  get outputs(): FishCall__Outputs {
    return new FishCall__Outputs(this);
  }
}

export class FishCall__Inputs {
  _call: FishCall;

  constructor(call: FishCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FishCall__Outputs {
  _call: FishCall;

  constructor(call: FishCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FishMultiCall extends ethereum.Call {
  get inputs(): FishMultiCall__Inputs {
    return new FishMultiCall__Inputs(this);
  }

  get outputs(): FishMultiCall__Outputs {
    return new FishMultiCall__Outputs(this);
  }
}

export class FishMultiCall__Inputs {
  _call: FishMultiCall;

  constructor(call: FishMultiCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class FishMultiCall__Outputs {
  _call: FishMultiCall;

  constructor(call: FishMultiCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class SetShouldWithdrawFromDAOCall extends ethereum.Call {
  get inputs(): SetShouldWithdrawFromDAOCall__Inputs {
    return new SetShouldWithdrawFromDAOCall__Inputs(this);
  }

  get outputs(): SetShouldWithdrawFromDAOCall__Outputs {
    return new SetShouldWithdrawFromDAOCall__Outputs(this);
  }
}

export class SetShouldWithdrawFromDAOCall__Inputs {
  _call: SetShouldWithdrawFromDAOCall;

  constructor(call: SetShouldWithdrawFromDAOCall) {
    this._call = call;
  }

  get _shouldWithdraw(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetShouldWithdrawFromDAOCall__Outputs {
  _call: SetShouldWithdrawFromDAOCall;

  constructor(call: SetShouldWithdrawFromDAOCall) {
    this._call = call;
  }
}

export class EndCall extends ethereum.Call {
  get inputs(): EndCall__Inputs {
    return new EndCall__Inputs(this);
  }

  get outputs(): EndCall__Outputs {
    return new EndCall__Outputs(this);
  }
}

export class EndCall__Inputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}

export class EndCall__Outputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}
